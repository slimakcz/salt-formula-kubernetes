{%- from "kubernetes/map.jinja" import common with context -%}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: external-dns
  namespace: {{ common.addons.externaldns.namespace }}
  labels:
    k8s-app: externaldns
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: external-dns
      annotations:
{%- if common.addons.externaldns.cni is defined %}
        cni: {{ common.addons.externaldns.cni }}
{%- endif %}
    spec:
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      containers:
      - name: external-dns
        image: {{ common.addons.externaldns.image }}
        imagePullPolicy: Always
        args:
        - --source=service
        - --source=ingress
        - --domain-filter={{ common.addons.externaldns.domain }} # will make ExternalDNS see only the hosted zones matching provided domain, omit to process all available hosted zones
        - --provider={{ common.addons.externaldns.provider }}
        {%- if common.addons.externaldns.provider == "google" %}
        - --google-project={{ common.addons.externaldns.google_options.project }}
        {%- endif %}
        #- --policy=upsert-only # would prevent ExternalDNS from deleting any records, omit to enable full synchronization
        - --registry=txt
        - --txt-owner-id=my-identifier
        - --publish-internal-services
        {%- if common.addons.externaldns.provider == "coredns" %}
        env:
        - name: ETCD_URLS
          value: "http://coredns-etcd-cluster-client:2379"
        {%- elif common.addons.externaldns.provider == "designate" %}
        envFrom:
        - secretRef:
            name: designate-os-secret
        {%- elif common.addons.externaldns.provider == "aws" %}
        envFrom:
        - secretRef:
            name: aws-secret
        {%- elif common.addons.externaldns.provider == "google" %}
        volumeMounts:
        - name: key
          mountPath: "/etc/google"
          readOnly: true
        env:
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: "/etc/google/key"
        {%- endif %}
        livenessProbe:
          httpGet:
            port: 7979
            path: /healthz
        ports:
          - containerPort: 7979
      {%- if common.addons.externaldns.provider == "google" %}
      volumes:
      - name: key
        secret:
          secretName: google-secret
      {%- endif %}
